// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.29;

// Copyright © 2025 Avv. Marcello Stanca - Firenze, Italia. All Rights Reserved.
// Hoc contractum, est pars SystematisSolidary.org , ab Auctore Marcello Stanca (MCMLXXVI)  conceditur.
// (This smart contract, part of the SolidarySystem.org, is granted for free use only to Caritas Internationalis (1976) by the author, Marcello Stanca.)

import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";

/**
 * @title Oraculum Caritatis (The Oracle of Compassion)
 * @author Avv. Marcello Stanca - Architectus Aequitatis (Architect of Justice)
 *
 * @notice Hoc est sanctuarium digitale, ubi nomina egentium in tabulas sacras referuntur. Non est codex, sed cor oecosystematis.
 * (English: This is a digital sanctuary where the names of the needy are recorded in a sacred ledger. It is not code, but the heart of the ecosystem.)
 *
 * @dev Hic contractus "Registrum Dignitatis" administrat. Partes fiduciales, sicut Caritas Internationalis, auctoritatem accipiunt ut incolas in locis calamitatis agnoscant. Eorum iudicium, in catena scriptum, efficit ut auxilium et privilegium morale ad eos qui maxime indigent, iuste dirigantur. Sicut in cathedrali gotica, ubi lux per vitreas coloratas colatur et sanctos illuminat, ita hic Oraculum lucem gratiae colat et animas benedictas designat.
 * (English: This contract manages the "Registry of Dignity". Trusted entities, such as Caritas Internationalis, are granted the authority to recognize residents in afflicted territories. Their judgment, written on-chain, ensures that aid and moral privilege are justly directed to those most in need. As in a Gothic cathedral, where light is filtered through stained glass to illuminate the saints, so this Oracle filters the light of grace and designates the blessed souls.)
 */
contract OraculumCaritatis is Initializable, AccessControlUpgradeable, UUPSUpgradeable {
    
    // ═══════════════════════════════════════════════════════════════════════════════
    // 🏛️ MUNERA ET TABULAE SACRAE (ROLES & SACRED LEDGER)
    // ═══════════════════════════════════════════════════════════════════════════════

    /**
     * @notice Munus Verificatoris, entitatibus caritatis concessum, ut dignitatem testentur.
     * (English: The Verificator Role, granted to charitable entities to bear witness to dignity.)
     */
    bytes32 public constant VERIFICATOR_ROLE = keccak256("VERIFICATOR_ROLE");

    /**
     * @notice Tabulae sacrae, ubi unusquisque homo privilegiatus agnoscitur.
     * (English: The sacred ledger, where each privileged soul is recognized.)
     */
    mapping(address => bool) public isPrivileged;

    // ═══════════════════════════════════════════════════════════════════════════════
    // 📢 NUNTII GRATIAE (EVENTS OF GRACE)
    // ═══════════════════════════════════════════════════════════════════════════════

    event AnimaBenedicta(address indexed anima); // A Soul is Blessed
    event BenedictioRevocata(address indexed anima); // A Blessing is Revoked

    // ═══════════════════════════════════════════════════════════════════════════════
    // 🏗️ INITIALIZATION (INITIUM OPERIS)
    // ═══════════════════════════════════════════════════════════════════════════════
    
    /// @custom:oz-upgrades-unsafe-allow constructor
    constructor() {
        _disableInitializers();
    }

    /**
     * @notice Contractum initializat, primum Verificatorem (sicut Caritas) constituens.
     * (English: Initializes the contract, establishing the first Verificator, such as Caritas.)
     */
    function initialize(address initialAdmin, address initialVerificator) public initializer {
        __AccessControl_init();
        __UUPSUpgradeable_init();

        _grantRole(DEFAULT_ADMIN_ROLE, initialAdmin);
        _grantRole(VERIFICATOR_ROLE, initialVerificator);
    }

    // ═══════════════════════════════════════════════════════════════════════════════
    // 🙏 FUNCTIONES SACRAE VERIFICATIONIS (SACRED FUNCTIONS OF VERIFICATION)
    // ═══════════════════════════════════════════════════════════════════════════════

    /**
     * @notice Animam in tabulas sacras inscribit, eam privilegio morali donans. Solis Verificatoribus concessum.
     * (English: Inscribes a soul into the sacred ledger, bestowing upon it moral privilege. Granted only to Verificators.)
     * @param anima Inscriptio hominis egentis. (The address of the person in need.)
     */
    function blessAddress(address anima) external onlyRole(VERIFICATOR_ROLE) {
        require(anima != address(0), "Anima non potest esse inanis"); // A soul cannot be null
        isPrivileged[anima] = true;
        emit AnimaBenedicta(anima);
    }

    /**
     * @notice Multas animas simul benedicit, sicut panis multiplicatus ad turbam satiandam.
     * (English: Blesses multiple souls at once, like the bread multiplied to feed the crowd.)
     */
    function blessMultipleAddresses(address[] calldata animae) external onlyRole(VERIFICATOR_ROLE) {
        for (uint256 i = 0; i < animae.length; i++) {
            require(animae[i] != address(0), "Anima non potest esse inanis");
            if (!isPrivileged[animae[i]]) {
                isPrivileged[animae[i]] = true;
                emit AnimaBenedicta(animae[i]);
            }
        }
    }

    /**
     * @notice Benedictione, si necesse, revocat. Actus prudentiae, non iudicii.
     * (English: Revokes a blessing, if necessary. An act of prudence, not of judgment.)
     * @param anima Inscriptio cuius benedictio revocanda est. (The address whose blessing is to be revoked.)
     */
    function revokeBlessing(address anima) external onlyRole(VERIFICATOR_ROLE) {
        require(anima != address(0), "Anima non potest esse inanis");
        isPrivileged[anima] = false;
        emit BenedictioRevocata(anima);
    }

    // ═══════════════════════════════════════════════════════════════════════════════
    // 🕊️ FUNCTIO ORACULI PUBLICA (PUBLIC ORACLE FUNCTION)
    // ═══════════════════════════════════════════════════════════════════════════════

    /**
     * @notice Interrogat an anima benedicta sit. Haec est vox Oraculi, perspicua et incorrupta.
     * (English: Queries if a soul is blessed. This is the voice of the Oracle, clear and incorruptible.)
     * @return bool Vera si benedicta, falsa si non. (True if blessed, false otherwise.)
     */
    function isSoulBlessed(address anima) external view returns (bool) {
        return isPrivileged[anima];
    }

    // ═══════════════════════════════════════════════════════════════════════════════
    // 🔄 AUCTORITAS EMENDANDI (UPGRADEABILITY)
    // ═══════════════════════════════════════════════════════════════════════════════

    /**
     * @dev Auctorizat contractus emendationem. Soli administratori principali (Domino) concessum.
     * (English: Authorizes the contract upgrade. Granted only to the default admin.)
     */
    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}
}
